<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_door</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This is where the messages are at. 


//write your messages in an array, starting at 0, like so
question[0] = "What kind of drink did Diana ask for?";
question[1] = "How many times more does human saliva need to reach a boiling point compared to water?";
question[2] = "During your lifetime, the amount of saliva you produce will fill up how many swimming pools?";
question[3] = "Bananas are curved because they grow towards what?";
question[4] = "What can rubbing a banana peel on your forehead cure?";
question[5] = "If you lift a kangaroo’s tail off the ground, what can’t it do?";
question[6] = "There are more kangaroos than ___ in Australia";
question[7] = "Where did fedoras first originate?";
question[8] = "Who wore the brim turned down so it could cover their eyes?";
question[9] = "What is the latest Zelda game called?";
question[10] = "What score did Breath of the Wild receive on IGN Reviews?";
question[11] = "Your Score: ";

//scr_answerChoices();

//edit numbers below
question_current = 0; //0 is the first number in our array, and the message we are currently at
question_end = 11; //11 is the last number in our array
question_draw = ""; //this is what we 'write' out. It's blank right now
answer_draw = ""; //this is what we 'write' out. It's blank right now
increase = 3; //the speed at which new characters are added
characters = 0; //how many characters have already been drawn
hold = 0; //if we hold 'Z', the text will render faster
global.points = 0;

question_length = string_length(question[question_current]); //get the number of characters in the first message

moveon = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>correctAnswer[0] = "Dirty martini";
otherChoice1[0] = "Lemonade";
otherChoice2[0]= "Long island";
otherChoice3[0]= "Jack and Coke";

correctAnswer[1] = "3 times";
otherChoice1[1] = "5 times";
otherChoice2[1]= "7 times";
otherChoice3[1]= "2 times";

correctAnswer[2] = "2";
otherChoice1[2] = "6";
otherChoice2[2]= "4";
otherChoice3[2]= "3";

correctAnswer[3] = "The Sun";
otherChoice1[3] = "The Moon";
otherChoice2[3]= "The Ocean";
otherChoice3[3]= "The Equator";

correctAnswer[4] = "A Headache";
otherChoice1[4] = "Diarrhea";
otherChoice2[4]= "A Cold";
otherChoice3[4]= "A Fever";

correctAnswer[5] = "Hop";
otherChoice1[5] = "Kick";
otherChoice2[5]= "Run";
otherChoice3[5]= "Poop";

correctAnswer[6] = "Humans";
otherChoice1[6] = "Other Animals";
otherChoice2[6]= "Computers";
otherChoice3[6]= "Restaurants";

correctAnswer[7] = "France";
otherChoice1[7] = "Iraq";
otherChoice2[7]= "Albania";
otherChoice3[7]= "Canada";

correctAnswer[8] = "Gangsters &amp; Young Men";
otherChoice1[8] = "Workers";
otherChoice2[8]= "Casual Men";
otherChoice3[8]= "Workers";

correctAnswer[9] = "Breath of the Wild";
otherChoice1[9] = "Majora's Mask";
otherChoice2[9]= "Ocarina of Time";
otherChoice3[9]= "Twilight Princess";

correctAnswer[10] = "10/10";
otherChoice1[10] = "8/10";
otherChoice2[10]= "6.69/10";
otherChoice3[10]= "7.75/10";

correctAnswer[11] = "";
otherChoice1[11] = "";
otherChoice2[11]= "";
otherChoice3[11]= "";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///This controls what is outputted to the textbox. 

if (global.game_state == global.game_state_textbox &amp;&amp;  global.col_with == global.col_with_door &amp;&amp; question_current &lt; 12) {
    if (characters &lt; question_length) { //if current character count is less than the amount in current message* 
        hold = keyboard_check(ord("Z")); //hold is true or false if we hold 'Z' or not
        characters += increase * (1 + hold); //increase speed based on hold
        question_draw  = string_copy(question[question_current], 0, characters); //copy string to current character
        answer_draw = string_copy(correctAnswer[question_current], 0, characters);
    } 
    else { //if current character is more than the amount in the current message
        if (moveon) {
            if (question_current &lt; question_end ) { //if there are more messages left to show 
                question_length = string_length(question[question_current]);  //get the new character length for message
                characters = 0; //set the characters back to 0
                moveon = false; //Set this to false
            } else if (question_current &gt; 10) {
                moveon = false;
                characters = 0;
                show_debug_message("Question is now 11");
            }
            else { //if our messages are done (we reach 6, in our case)...
                question_draw = ""; //Setting this to blank  
                answer_draw = ""; //Setting this to blank  
                //question_current = 0; // Resetting the variable
                characters = 0; //set the characters back to 0
                //global.game_state = global.game_state_doneQuestions; //Changing the game state to the character now done talking
                //show_debug_message("I am finally done with questions"); 
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Incrementing the points

//If A is pressed 
 if (question_current &lt; 12) {
    if (keyboard_check_pressed(ord("A"))) {
       if (correctAnswer[question_current] == data[0]) {
           if (question_current &lt; 11){
               global.points += 1;
           }
           
       }
       moveon = true;
       
       if (question_current &lt; 12) {
        question_current += 1;
       } else {
        question_current = 11;
       }
    }
    
    ////If B is pressed 
     if (keyboard_check_pressed(ord("B"))) {
        if (correctAnswer[question_current] == data[1]) {
           if (question_current &lt; 11){
               global.points += 1;
           }
            
            
        }
        
        moveon = true;
           if (question_current &lt; 12) {
            question_current += 1;
           } else {
            question_current = 11;
           }
     }   
    //If C is pressed 
     if (keyboard_check_pressed(ord("C"))) {
        if (correctAnswer[question_current] == data[2]) {
           if (question_current &lt; 11){
               global.points += 1;
           }
        }
        moveon = true;
           if (question_current &lt; 12) {
            question_current += 1;
           } else {
            question_current = 11;
           }
     }     
    //If D is pressed 
     if (keyboard_check_pressed(ord("D"))) {
        if (correctAnswer[question_current] == data[3]) {
           if (question_current &lt; 11){
               global.points += 1;
           }
        }
        moveon = true;
           if (question_current &lt; 12) {
            question_current += 1;
           } else {
            question_current = 11;
           }
     }     
 }
 
 show_debug_message(string(global.points) + string(" THESE ARE THE POINTS"));
 show_debug_message(string(question_current) + string(" THESE ARE THE current questions"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Randomize the answers
if (global.game_state != global.game_state_textbox or moveon &amp;&amp; question_current &lt; 12 ) {

    data[0] = correctAnswer[question_current];
    data[1] = otherChoice1[question_current];
    data[2] = otherChoice2[question_current];
    data[3] = otherChoice3[question_current];
    
    size = 4;
    
    var i, j, k;
    for (i = 0; i &lt; size; i += 1){
        j = irandom_range(i, size - 1)
        if (i != j)
        {
            k = data[i]
            data[i] = data[j]
            data[j] = k
        }
        
    }
}
    






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_guy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setting the global.col_with to true when it collides 

//It will only change the game state, if and only if the game_state is set to regular
//This is done so the character can walk away, and talk to them again, if they wish.
if (global.game_state == global.game_state_regular) {
    global.game_state = global.game_state_textbox; 
}

//Setting the collison with variable. 
//This is only true if the textbox is displayed
//This is added so the text box can display the correct message
if (global.game_state == global.game_state_textbox) {
    global.col_with = global.col_with_door; 
} else {
    global.col_with = global.col_with_nobody; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing the text &amp; background in the bottom half of the screen. 

//Redrawing the sprite
if (global.col_with != global.col_with_door) {
    draw_self();
}

//Only draw the textbox if the global.game_state is on the textbox state. 
if (global.game_state == global.game_state_textbox &amp;&amp;  global.col_with == global.col_with_door) {
    //The positions of the rectangles, text, and the "Press Z to continue."
    xpos_rect1 = 0;
    ypos_rect1 = 0;
    xpos_rect2 = room_width;
    ypos_rect2 = room_height;
    
    xpos_text = 16;
    ypos_text = 16;
    
    xpos_z = 8;
    ypos_z = 356;
    
    xpos_answer = 48;
    ypos_ansawer = 240;
    
    //Only draw the textbox if the global.game_state is on the textbox state. 
    if (global.game_state == global.game_state_textbox &amp;&amp; question_current &lt; 11){
        //Setting the background color
        draw_set_color(c_black);
    
        //Setting the rectangle
        draw_rectangle(xpos_rect1, ypos_rect1, xpos_rect2, ypos_rect2, false);
        //Changing the font color to white
        draw_set_color(c_white); 
        //Displaying the message
        draw_text_ext(xpos_text, ypos_text, question_draw, 14, room_width-10);
        
        draw_set_color(c_aqua);
        
        draw_text(room_width/2, room_height/2, string(global.points) + string(" /11"));
        
        draw_set_color(c_blue); 
        //Displaying the message
        draw_text_ext(16, 280, string("A: ") + string(data[0]), 14, room_width-10);
        draw_text_ext(288, 280, string("B: ") + string(data[1]), 14, room_width-10);
        draw_text_ext(16, 320, string("C: ") + string(data[2]), 14, room_width-10);
        draw_text_ext(288, 320, string("D: ") + string(data[3]), 14, room_width-10);
        
        //Changing the font color to red
        draw_set_color(c_red);
        //Informing the user that they have to press z to continue. 
        draw_text_ext(xpos_z, ypos_z, "Press A = A, B = B, C = C, D = D", 15, room_width);
    } else if (global.game_state == global.game_state_textbox &amp;&amp; question_current &gt; 10) {
        //Setting the background color
        draw_set_color(c_black);
    
        //Setting the rectangle
        draw_rectangle(xpos_rect1, ypos_rect1, xpos_rect2, ypos_rect2, false);
        
        //Changing the font color to white
        draw_set_color(c_white); 
        //Displaying the message
        draw_text_ext(xpos_text, ypos_text, question_draw, 14, room_width-10);
        
        draw_set_color(c_aqua);
        
        draw_text(room_width/2, room_height/2, string(global.points) + string(" /11"));
        
        //Changing the font color to red
        draw_set_color(c_red);
        //Informing the user that they have to press z to continue. 
        draw_text_ext(xpos_z, ypos_z, "Press ESCAPE to exit", 15, room_width);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>17,16</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
